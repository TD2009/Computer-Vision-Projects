import cv2
import mediapipe as mp
from time import sleep
from pyautogui import position, moveTo, size, click, scroll

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1, min_detection_confidence=0.5, min_tracking_confidence=0.5)
cap = cv2.VideoCapture(0)

def check_thumb_direction(hand_landmarks):
    thumb_x = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP].x
    index_mcp_x = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_MCP].x
    if (thumb_x > index_mcp_x) and (thumb_x - index_mcp_x) > 0.03: return "right"
    elif (thumb_x < index_mcp_x) and (index_mcp_x - thumb_x) > 0.03: return "left"
    else: return None

def check_thumb_index_touch(hand_landmarks):
    thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
    index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
    if abs(thumb_tip.x - index_tip.x) < 0.05 and abs(thumb_tip.y - index_tip.y) < 0.05: return True
    else: return False

def check_raised_fingers(landmarks_dict):
    finger_landmarks = {"thumb": [1, 2, 3, 4], "index": [5, 6, 7, 8], "middle": [9, 10, 11, 12], "ring": [13, 14, 15, 16], "pinky": [17, 18, 19, 20]}
    raised_fingers = []

    for finger, landmarks_index in finger_landmarks.items():
        if not landmarks_dict[landmarks_index[0]][1] < landmarks_dict[landmarks_index[-1]][1]:
            raised_fingers.append(finger)

    if "thumb" in raised_fingers: raised_fingers.remove("thumb")
    thumb_tip = landmarks_dict[mp_hands.HandLandmark.THUMB_TIP]
    index_mcp = landmarks_dict[mp_hands.HandLandmark.INDEX_FINGER_MCP]
    if thumb_tip[1] < index_mcp[1]: raised_fingers.insert(0, "thumb")
    return raised_fingers

def ease_in_out_cubic(t):
    t *= 2
    if t < 1: return 0.5 * t ** 3
    t -= 2
    return 0.5 * (t ** 3 + 2)

def move_cursor_with_finger(index_values):
    if index_values is not None and index_values[0] is not None and index_values[1] is not None:
        current_x, current_y = position()
        dx = index_values[0] - current_x
        dy = index_values[1] - current_y
        distance = ((dx ** 2) + (dy ** 2)) ** 0.5
        duration = ease_in_out_cubic(distance / 5000)
        moveTo(index_values[0], index_values[1], duration=duration)

def set_cursor_position(index_values, index_tip, width, height):
    if 0.31 < index_tip[0] < 0.86 and 0.21 < index_tip[1] < 0.72:
        index_values[0] = int(((index_tip[0] - 0.31) * (1 / 0.55)) * width)
        index_values[1] = int(((index_tip[1] - 0.21) * (1 / 0.51)) * height)
    move_cursor_with_finger(index_values)

index_values = [None, None]
width, height = size()

while cap.isOpened():
    ret, frame = cap.read()
    frame = cv2.flip(frame, 1)
    if not ret: break
    image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(image_rgb)
    cv2.rectangle(frame, (200, 100), (550, 350), (0, 0, 0), 2)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            landmarks = [[lm.x, lm.y] for lm in hand_landmarks.landmark]
            landmarks_dict = {i: lm for i, lm in enumerate(landmarks)}

            raised_fingers = check_raised_fingers(landmarks_dict)
            index_tip = landmarks_dict[mp_hands.HandLandmark.INDEX_FINGER_TIP]
            if len(raised_fingers) == 1 and "index" in raised_fingers: set_cursor_position(index_values, index_tip, width, height)
            if check_thumb_index_touch(hand_landmarks):
                click()
                sleep(0.2)
            if set(raised_fingers) == {"index","middle","ring"}: scroll(100)
            if set(raised_fingers) == {"index","middle","ring","pinky"}: scroll(-100)

    cv2.imshow('MediaPipe Hands', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'): break

cap.release()
cv2.destroyAllWindows()
