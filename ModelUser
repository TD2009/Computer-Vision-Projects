import numpy as np
from PIL import ImageGrab
from tensorflow.keras.models import load_model
import matplotlib as plt
import cv2
import keyboard
import os

model_path = input("Enter the path to your model: ")
while not os.path.isfile(model_path):
    print("Model directory does not exist. Make sure the model exists and that the path is correct.")
    model_path = input("Enter the path to your model: ")

#Numerical labels for categories
categories_input = input("Enter category names separated by comma. Enter the names of what they are in the file (e.g., Category1,Category2): ")
category_names = [category.strip() for category in categories_input.split(',')]

label_to_category = {i: category_names[i] for i in range(len(category_names))}

model = load_model("C:/Tanish/AiTrainingData/ChessModels/TanishMonisha_model.h5")

def predict_category(screenshot):
    # Preprocess image for prediction
    gray = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY) 
    _, mask = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY)
    mask = cv2.bitwise_not(mask)
    mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)  # Convert mask to 3 channels for bitwise_and
    preprocessed_image = cv2.bitwise_and(screenshot, mask)
    resized = cv2.resize(preprocessed_image, (28, 28), interpolation=cv2.INTER_AREA)
    normalized = resized.astype('float32') / 255.0
    reshaped = normalized.reshape((1, 28, 28, 3))

    # Predict the category
    prediction = model.predict(reshaped)

    # Get the highest probability category
    predicted_index = np.argmax(prediction)

    # Get the category name from numerical label
    predicted_category_name = label_to_category[predicted_index]

    # Get the probability of the predicted category
    predicted_probability = prediction[0][predicted_index]

    # Return the predicted category name and probability
    return predicted_category_name, predicted_probability


def screen():
    while True:
        if keyboard.is_pressed('space'):
            # Get Screenshot
            screenshot = ImageGrab.grab()
            # Predict category from the screenshot
            predicted_category = predict_category(screenshot)
            
            plt.imshow(screenshot)
            plt.title(f'Predicted Category: {predicted_category}')
            plt.axis('off')
            plt.show()
        if keyboard.is_pressed("q"):
            break

def webcam():
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        frame = cv2.flip(frame,1)
        if not ret:
            break

        predicted_category, predicted_probability = predict_category(frame)
            
        cv2.putText(frame, f'Category: {predicted_category}, Accuracy: {predicted_probability*100:.2f}%', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,0), 2, cv2.LINE_AA)
        cv2.imshow("Frame",frame)
            
        if (cv2.waitKey(1) & 0xFF == ord('q')) or keyboard.is_pressed('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

try:
    screenOrWebcam = int(input("1. Screen\n2. Webcam\n: "))
except ValueError:
    screenOrWebcam = int(input("Enter a number\n1. Screen\n2. Webcam\n: "))

if screenOrWebcam == 1:
    screen()
else:
    webcam()
